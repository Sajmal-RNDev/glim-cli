"use strict";(self.webpackChunkglim_cli=self.webpackChunkglim_cli||[]).push([[362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||l;return n?a.createElement(g,r(r({ref:t},u),{},{components:n})):a.createElement(g,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var d=2;d<l;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8864:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const l={},r="E2E",o={unversionedId:"Testing/e2e",id:"Testing/e2e",title:"E2E",description:"E2E is one of the major pillars of enterprise-level mobile application development. Glim coming with a pack of E2E facility. At the initial project setup, E2E is not activated along with glim. But we can easily configure the testing framework with these steps.",source:"@site/docs/Testing/e2e.md",sourceDirName:"Testing",slug:"/Testing/e2e",permalink:"/glim-cli/Testing/e2e",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Screen",permalink:"/glim-cli/Generators/Screen"},next:{title:"Unit Testing",permalink:"/glim-cli/Testing/unitTesting"}},s={},d=[{value:"Global Configuration",id:"global-configuration",level:2},{value:"Project Configuration",id:"project-configuration",level:2},{value:"Device Configurations",id:"device-configurations",level:2},{value:"check emulator list",id:"check-emulator-list",level:3},{value:"App Config",id:"app-config",level:2},{value:"Android",id:"android",level:3},{value:"Ios",id:"ios",level:3},{value:"Android Configuration",id:"android-configuration",level:2},{value:"Build scripts",id:"build-scripts",level:3},{value:"Native Test Code",id:"native-test-code",level:3},{value:"Manifests",id:"manifests",level:3},{value:"Build the app",id:"build-the-app",level:2},{value:"Ios (Debug)",id:"ios-debug",level:3},{value:"Ios (Release)",id:"ios-release",level:3},{value:"Android (Debug)",id:"android-debug",level:3},{value:"Android (Release)",id:"android-release",level:3},{value:"Write a Test",id:"write-a-test",level:2},{value:"Running Test",id:"running-test",level:2},{value:"Ios (Debug)",id:"ios-debug-1",level:3},{value:"Ios (Release)",id:"ios-release-1",level:3},{value:"Android (Debug)",id:"android-debug-1",level:3},{value:"Android (Release)",id:"android-release-1",level:3}],u={toc:d};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"e2e"},"E2E"),(0,i.kt)("p",null,"E2E is one of the major pillars of enterprise-level mobile application development. Glim coming with a pack of E2E facility. At the initial project setup, E2E is not activated along with glim. But we can easily configure the testing framework with these steps."),(0,i.kt)("h1",{id:"detox"},"Detox"),(0,i.kt)("p",null,"In glim, we are using detox for E2E and automation. Detox is the widely used gray box e2e framework developed by Wix. you can read official doc of detox from ",(0,i.kt)("a",{parentName:"p",href:"https://wix.github.io/Detox/"},"here..")),(0,i.kt)("h2",{id:"global-configuration"},"Global Configuration"),(0,i.kt)("p",null,"Before Starting using Detox you need some Global Configurations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install Detox CLI")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install detox-cli --global\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install applesimutils ","[Only for Mac Users]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew tap wix/brew\nbrew install applesimutils\n")),(0,i.kt)("h2",{id:"project-configuration"},"Project Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install Dependencies")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install detox --save-dev\n")),(0,i.kt)("p",null,"Detox work along with jest, so we need to install that"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'npm install "jest@^29" --save-dev\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Initialize Detox")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox init\n")),(0,i.kt)("p",null,"This will create some files like this"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},".detoxrc.js\ne2e/jest.config.js\ne2e/starter.test.js\n")),(0,i.kt)("h2",{id:"device-configurations"},"Device Configurations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First open the .detoxrc.js and add the emulators installed in your device like this..")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'/** @type {Detox.DetoxConfig} */\nmodule.exports = {\n  // ...\n  devices: {\n    simulator: {\n      type: "ios.simulator",\n      device: {\n        type: "iPhone 12",\n      },\n    },\n    attached: {\n      type: "android.attached",\n      device: {\n        adbName: ".*", // any attached device\n      },\n    },\n    emulator: {\n      type: "android.emulator",\n      device: {\n        avdName: "Pixel_3a_API_30_x86",\n      },\n    },\n  },\n};\n')),(0,i.kt)("h3",{id:"check-emulator-list"},"check emulator list"),(0,i.kt)("p",null,"For android"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"emulator -list-avds\n")),(0,i.kt)("p",null,"For Ios"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"xcrun simctl list devicetypes\n")),(0,i.kt)("h2",{id:"app-config"},"App Config"),(0,i.kt)("p",null,"In the .detoxrc.js file edit the paths based on your directory."),(0,i.kt)("h3",{id:"android"},"Android"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  apps: {\n    "android.debug": {\n      type: "android.apk",\n      binaryPath: "android/app/build/outputs/apk/debug/app-debug.apk",\n      build:\n        "cd android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug",\n    },\n    "android.release": {\n      type: "android.apk",\n      binaryPath: "android/app/build/outputs/apk/release/app-release.apk",\n      build:\n        "cd android && ./gradlew assembleRelease assembleAndroidTest -DtestBuildType=release",\n    },\n    // ...\n  },\n  // ...\n};\n')),(0,i.kt)("h3",{id:"ios"},"Ios"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"   apps: {\n     'ios.debug': {\n       type: 'ios.app',\n-      binaryPath: 'ios/build/Build/Products/Debug-iphonesimulator/YOUR_APP.app',\n+      binaryPath: 'ios/build/Build/Products/Debug-iphonesimulator/example.app',\n-      build: 'xcodebuild -workspace ios/YOUR_APP.xcworkspace -scheme YOUR_APP -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build'\n+      build: 'xcodebuild -workspace ios/example.xcworkspace -scheme example -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build'\n     },\n     'ios.release': {\n       type: 'ios.app',\n-      binaryPath: 'ios/build/Build/Products/Release-iphonesimulator/YOUR_APP.app',\n+      binaryPath: 'ios/build/Build/Products/Release-iphonesimulator/example.app',\n-      build: 'xcodebuild -workspace ios/YOUR_APP.xcworkspace -scheme YOUR_APP -configuration Release -sdk iphonesimulator -derivedDataPath ios/build'\n+      build: 'xcodebuild -workspace ios/example.xcworkspace -scheme example -configuration Release -sdk iphonesimulator -derivedDataPath ios/build'\n     },\n     ```\n")),(0,i.kt)("h2",{id:"android-configuration"},"Android Configuration"),(0,i.kt)("p",null,"You need to edit these files to complete configuration."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build scripts:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"android/build.gradle"),(0,i.kt)("li",{parentName:"ul"},"android/app/build.gradle"))),(0,i.kt)("li",{parentName:"ul"},"Native test code:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"android/app/src/androidTest/java/com/your.package/DetoxTest.java"))),(0,i.kt)("li",{parentName:"ul"},"Manifests:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"android/app/src/main/AndroidManifest.xml"),(0,i.kt)("li",{parentName:"ul"},"android/app/src/main/res/xml/network_security_config.xml")))),(0,i.kt)("h3",{id:"build-scripts"},"Build scripts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle",metastring:'{title="android/build.gradle"}',"{title":'"android/build.gradle"}'},' buildscript {\n   ext {\n     buildToolsVersion = "31.0.0"\n     minSdkVersion = 21\n     compileSdkVersion = 30\n     targetSdkVersion = 30\n+    kotlinVersion = \'X.Y.Z\'\n   }\n \u2026\n   dependencies {\n     classpath("com.android.tools.build:gradle:7.1.1")\n     classpath("com.facebook.react:react-native-gradle-plugin")\n     classpath("de.undercouch:gradle-download-task:5.0.1")\n+    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")\n \u2026\n\n allprojects {\n   repositories {\n   \u2026\n   google()\n+  maven {\n+    url("$rootDir/../node_modules/detox/Detox-android")\n+  }\n   maven { url \'https://www.jitpack.io\' }\n }\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle",metastring:'{title="android/app/build.gradle"}',"{title":'"android/app/build.gradle"}'}," \u2026\n\n android {\n   \u2026\n   defaultConfig {\n     \u2026\n     versionCode 1\n     versionName \"1.0\"\n+    testBuildType System.getProperty('testBuildType', 'debug')\n+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'\n   \u2026\n   buildTypes {\n     release {\n       minifyEnabled true\n       proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n+      proguardFile \"${project(':detox').projectDir}/proguard-rules-app.pro\"\n\n       signingConfig signingConfigs.release\n     }\n   }\n   \u2026\n\n dependencies {\n+  androidTestImplementation('com.wix:detox:+')\n+  implementation 'androidx.appcompat:appcompat:1.1.0'\n   implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n")),(0,i.kt)("h3",{id:"native-test-code"},"Native Test Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'{title="android/app/src/androidTest/java/com/<your.package>/DetoxTest.java"}',"{title":'"android/app/src/androidTest/java/com/<your.package>/DetoxTest.java"}'},"package com.<your.package>;\n\nimport com.wix.detox.Detox;\nimport com.wix.detox.config.DetoxConfig;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\nimport androidx.test.filters.LargeTest;\nimport androidx.test.rule.ActivityTestRule;\n\n@RunWith(AndroidJUnit4.class)\n@LargeTest\npublic class DetoxTest {\n    @Rule // (2)\n    public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(MainActivity.class, false, false);\n\n    @Test\n    public void runDetoxTests() {\n        DetoxConfig detoxConfig = new DetoxConfig();\n        detoxConfig.idlePolicyConfig.masterTimeoutSec = 90;\n        detoxConfig.idlePolicyConfig.idleResourceTimeoutSec = 60;\n        detoxConfig.rnContextLoadTimeoutSec = (BuildConfig.DEBUG ? 180 : 60);\n\n        Detox.runTests(mActivityRule, detoxConfig);\n    }\n}\n")),(0,i.kt)("h3",{id:"manifests"},"Manifests"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'{title="android/app/src/main/res/xml/network_security_config.xml"}',"{title":'"android/app/src/main/res/xml/network_security_config.xml"}'},'<?xml version="1.0" encoding="utf-8"?>\n<network-security-config>\n    <domain-config cleartextTrafficPermitted="true">\n        <domain includeSubdomains="true">10.0.2.2</domain>\n        <domain includeSubdomains="true">localhost</domain>\n    </domain-config>\n</network-security-config>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'{title="android/app/src/main/AndroidManifest.xml"}',"{title":'"android/app/src/main/AndroidManifest.xml"}'},' <manifest>\n   <application\n   \u2026\n+    android:networkSecurityConfig="@xml/network_security_config">\n   </application>\n </manifest>\n')),(0,i.kt)("h2",{id:"build-the-app"},"Build the app"),(0,i.kt)("h3",{id:"ios-debug"},"Ios (Debug)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox build --configuration ios.sim.debug\n")),(0,i.kt)("h3",{id:"ios-release"},"Ios (Release)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox build --configuration ios.sim.release\n")),(0,i.kt)("h3",{id:"android-debug"},"Android (Debug)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox build --configuration android.emu.debug\n")),(0,i.kt)("h3",{id:"android-release"},"Android (Release)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox build --configuration android.emu.release\n")),(0,i.kt)("h2",{id:"write-a-test"},"Write a Test"),(0,i.kt)("p",null,"For the first time may be there is a sample test suit in your project. go to e2e folder and delete that.\nThen create a test file in e2e folder like this ",(0,i.kt)("inlineCode",{parentName:"p"},"e2e/sample.test.js")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'{title="e2e/sample.test.js"}',"{title":'"e2e/sample.test.js"}'},'describe("Example", () => {\n  beforeAll(async () => {});\n\n  beforeEach(async () => {});\n\n  it("should test something", async () => {});\n});\n')),(0,i.kt)("h2",{id:"running-test"},"Running Test"),(0,i.kt)("h3",{id:"ios-debug-1"},"Ios (Debug)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox test --configuration ios.sim.debug\n")),(0,i.kt)("h3",{id:"ios-release-1"},"Ios (Release)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox test --configuration ios.sim.release\n")),(0,i.kt)("h3",{id:"android-debug-1"},"Android (Debug)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox test --configuration android.emu.debug\n")),(0,i.kt)("h3",{id:"android-release-1"},"Android (Release)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"detox test --configuration android.emu.release\n")))}p.isMDXComponent=!0}}]);